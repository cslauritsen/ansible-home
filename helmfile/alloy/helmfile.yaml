repositories:
  - name: grafana
    url: https://grafana.github.io/helm-charts
releases:
  - name: alloy
    namespace: o11y
    createNamespace: true
    chart: grafana/alloy
    kubeContext: rpi
    values:
      - ./values-chart.yaml
      - alloy:
          configMap:
            content: |
              // Write your Alloy config here:
              loki.write "grafana_loki" {
                endpoint {
                    url = "https://logs-prod-036.grafana.net/loki/api/v1/push"
                    basic_auth {
                      username = {{ exec "op" (list "read" "--no-newline" "op://Private/n4b33z3lps73pnkdmyawdxfdoq/username") | quote }}
                      password = {{ exec "op" (list "read" "--no-newline" "op://Private/n4b33z3lps73pnkdmyawdxfdoq/password") | quote }}
                    }
                 }
              }
              prometheus.remote_write "grafanacloud" {
                endpoint {
                url = "https://prometheus-prod-56-prod-us-east-2.grafana.net/api/prom/push"
                  basic_auth {
                    username = "2419169"
                    password = {{ exec "op" (list "read" "--no-newline" "op://Private/n4b33z3lps73pnkdmyawdxfdoq/password") | quote }}
                  }
                }
              }
              logging {
                  level = "info"
                  format = "logfmt"
              }
              // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
              // It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
              discovery.kubernetes "pod" {
                role = "pod"
              }
              
              // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
              // If no rules are defined, then the input targets are exported as-is.
              discovery.relabel "pod_logs" {
                targets = discovery.kubernetes.pod.targets
              
                // Label creation - "namespace" field from "__meta_kubernetes_namespace"
                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  action = "replace"
                  target_label = "namespace"
                }
              
                // Label creation - "pod" field from "__meta_kubernetes_pod_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_name"]
                  action = "replace"
                  target_label = "pod"
                }
              
                // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "container"
                }
              
                // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                  action = "replace"
                  target_label = "app"
                }
              
                // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
                // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
                rule {
                  source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "job"
                  separator = "/"
                  replacement = "$1"
                }
              
                // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
                // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
                rule {
                  source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "__path__"
                  separator = "/"
                  replacement = "/var/log/pods/*$1/*.log"
                }
              
                // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_id"]
                  action = "replace"
                  target_label = "container_runtime"
                  regex = "^(\\S+):\\/\\/.+$"
                  replacement = "$1"
                }
              }
              
              // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
              loki.source.kubernetes "pod_logs" {
                targets    = discovery.relabel.pod_logs.output
                forward_to = [loki.process.pod_logs.receiver]
              }
              
              // loki.process receives log entries from other Loki components, applies one or more processing stages,
              // and forwards the results to the list of receivers in the component's arguments.
              loki.process "pod_logs" {
                stage.static_labels {
                    values = {
                      cluster = "rpi",
                    }
                }
                forward_to = [loki.write.grafana_loki.receiver]
              }
              prometheus.scrape "prom_scrape" {
                targets    = discovery.kubernetes.pod.targets
                forward_to = [prometheus.remote_write.grafanacloud.receiver]
              }
